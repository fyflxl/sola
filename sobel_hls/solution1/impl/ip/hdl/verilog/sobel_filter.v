// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_filter,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.283000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=522,HLS_SYN_LUT=536,HLS_VERSION=2018_2}" *)

module sobel_filter (
        ap_clk,
        ap_rst_n,
        inter_pix_V_V_TDATA,
        inter_pix_V_V_TVALID,
        inter_pix_V_V_TREADY,
        out_pix_V_V_TDATA,
        out_pix_V_V_TVALID,
        out_pix_V_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_state8 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inter_pix_V_V_TDATA;
input   inter_pix_V_V_TVALID;
output   inter_pix_V_V_TREADY;
output  [31:0] out_pix_V_V_TDATA;
output   out_pix_V_V_TVALID;
input   out_pix_V_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] inter_pix_V_V_0_data_out;
wire    inter_pix_V_V_0_vld_in;
wire    inter_pix_V_V_0_vld_out;
wire    inter_pix_V_V_0_ack_in;
reg    inter_pix_V_V_0_ack_out;
reg   [31:0] inter_pix_V_V_0_payload_A;
reg   [31:0] inter_pix_V_V_0_payload_B;
reg    inter_pix_V_V_0_sel_rd;
reg    inter_pix_V_V_0_sel_wr;
wire    inter_pix_V_V_0_sel;
wire    inter_pix_V_V_0_load_A;
wire    inter_pix_V_V_0_load_B;
reg   [1:0] inter_pix_V_V_0_state;
wire    inter_pix_V_V_0_state_cmp_full;
reg   [31:0] out_pix_V_V_1_data_out;
reg    out_pix_V_V_1_vld_in;
wire    out_pix_V_V_1_vld_out;
wire    out_pix_V_V_1_ack_in;
wire    out_pix_V_V_1_ack_out;
reg   [31:0] out_pix_V_V_1_payload_A;
reg   [31:0] out_pix_V_V_1_payload_B;
reg    out_pix_V_V_1_sel_rd;
reg    out_pix_V_V_1_sel_wr;
wire    out_pix_V_V_1_sel;
wire    out_pix_V_V_1_load_A;
wire    out_pix_V_V_1_load_B;
reg   [1:0] out_pix_V_V_1_state;
wire    out_pix_V_V_1_state_cmp_full;
wire   [31:0] rows;
reg   [31:0] rows_0_data_reg;
reg    rows_0_vld_reg;
reg    rows_0_ack_out;
wire   [31:0] cols;
reg   [31:0] cols_0_data_reg;
reg    cols_0_vld_reg;
reg    cols_0_ack_out;
reg    inter_pix_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_288;
reg    out_pix_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_288_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_reg_288_pp0_iter2_reg;
reg   [30:0] x_reg_107;
reg  signed [31:0] cols_read_reg_273;
wire    ap_CS_fsm_state2;
reg  signed [31:0] rows_read_reg_278;
wire   [31:0] PIXNUM_fu_118_p2;
reg   [31:0] PIXNUM_reg_283;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_126_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] x_1_fu_131_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_5_i_reg_297;
wire   [31:0] p_Result_s_fu_251_p5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] x_cast_fu_122_p1;
wire   [7:0] tmp_2_fu_151_p4;
wire   [13:0] p_shl3_i_fu_161_p3;
wire   [8:0] p_shl4_i_fu_173_p3;
wire   [7:0] new_pix_1_fu_141_p4;
wire   [14:0] p_shl_i_fu_189_p3;
wire   [7:0] new_pix_2_fu_137_p1;
wire   [14:0] p_shl3_i_cast_fu_169_p1;
wire   [14:0] p_shl4_i_cast_fu_181_p1;
wire   [14:0] tmp1_fu_205_p2;
wire   [15:0] p_shl_i_cast_fu_197_p1;
wire   [15:0] tmp_9_i_fu_185_p1;
wire   [15:0] tmp2_fu_215_p2;
wire   [15:0] tmp1_cast_fu_211_p1;
wire   [12:0] grp_fu_264_p3;
wire   [15:0] tmp_add0_fu_221_p2;
wire   [15:0] tmp_add1_cast_fu_227_p1;
wire   [15:0] tmp_3_i_fu_230_p2;
wire   [7:0] gray_fu_246_p2;
wire   [5:0] grp_fu_264_p0;
wire   [7:0] grp_fu_264_p1;
wire   [8:0] grp_fu_264_p2;
wire    ap_CS_fsm_state9;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [12:0] grp_fu_264_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 inter_pix_V_V_0_sel_rd = 1'b0;
#0 inter_pix_V_V_0_sel_wr = 1'b0;
#0 inter_pix_V_V_0_state = 2'd0;
#0 out_pix_V_V_1_sel_rd = 1'b0;
#0 out_pix_V_V_1_sel_wr = 1'b0;
#0 out_pix_V_V_1_state = 2'd0;
#0 rows_0_data_reg = 32'd0;
#0 rows_0_vld_reg = 1'b0;
#0 cols_0_data_reg = 32'd0;
#0 cols_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

sobel_filter_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
sobel_filter_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .rows(rows),
    .cols(cols)
);

sobel_filter_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
sobel_filter_mac_bkb_U1(
    .din0(grp_fu_264_p0),
    .din1(grp_fu_264_p1),
    .din2(grp_fu_264_p2),
    .dout(grp_fu_264_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inter_pix_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inter_pix_V_V_0_ack_out == 1'b1) & (inter_pix_V_V_0_vld_out == 1'b1))) begin
            inter_pix_V_V_0_sel_rd <= ~inter_pix_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inter_pix_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inter_pix_V_V_0_ack_in == 1'b1) & (inter_pix_V_V_0_vld_in == 1'b1))) begin
            inter_pix_V_V_0_sel_wr <= ~inter_pix_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inter_pix_V_V_0_state <= 2'd0;
    end else begin
        if ((((inter_pix_V_V_0_state == 2'd2) & (inter_pix_V_V_0_vld_in == 1'b0)) | ((inter_pix_V_V_0_state == 2'd3) & (inter_pix_V_V_0_vld_in == 1'b0) & (inter_pix_V_V_0_ack_out == 1'b1)))) begin
            inter_pix_V_V_0_state <= 2'd2;
        end else if ((((inter_pix_V_V_0_state == 2'd1) & (inter_pix_V_V_0_ack_out == 1'b0)) | ((inter_pix_V_V_0_state == 2'd3) & (inter_pix_V_V_0_ack_out == 1'b0) & (inter_pix_V_V_0_vld_in == 1'b1)))) begin
            inter_pix_V_V_0_state <= 2'd1;
        end else if (((~((inter_pix_V_V_0_vld_in == 1'b0) & (inter_pix_V_V_0_ack_out == 1'b1)) & ~((inter_pix_V_V_0_ack_out == 1'b0) & (inter_pix_V_V_0_vld_in == 1'b1)) & (inter_pix_V_V_0_state == 2'd3)) | ((inter_pix_V_V_0_state == 2'd1) & (inter_pix_V_V_0_ack_out == 1'b1)) | ((inter_pix_V_V_0_state == 2'd2) & (inter_pix_V_V_0_vld_in == 1'b1)))) begin
            inter_pix_V_V_0_state <= 2'd3;
        end else begin
            inter_pix_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pix_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_pix_V_V_1_ack_out == 1'b1) & (out_pix_V_V_1_vld_out == 1'b1))) begin
            out_pix_V_V_1_sel_rd <= ~out_pix_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pix_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_pix_V_V_1_ack_in == 1'b1) & (out_pix_V_V_1_vld_in == 1'b1))) begin
            out_pix_V_V_1_sel_wr <= ~out_pix_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pix_V_V_1_state <= 2'd0;
    end else begin
        if ((((out_pix_V_V_1_state == 2'd2) & (out_pix_V_V_1_vld_in == 1'b0)) | ((out_pix_V_V_1_state == 2'd3) & (out_pix_V_V_1_vld_in == 1'b0) & (out_pix_V_V_1_ack_out == 1'b1)))) begin
            out_pix_V_V_1_state <= 2'd2;
        end else if ((((out_pix_V_V_1_state == 2'd1) & (out_pix_V_V_1_ack_out == 1'b0)) | ((out_pix_V_V_1_state == 2'd3) & (out_pix_V_V_1_ack_out == 1'b0) & (out_pix_V_V_1_vld_in == 1'b1)))) begin
            out_pix_V_V_1_state <= 2'd1;
        end else if (((~((out_pix_V_V_1_vld_in == 1'b0) & (out_pix_V_V_1_ack_out == 1'b1)) & ~((out_pix_V_V_1_ack_out == 1'b0) & (out_pix_V_V_1_vld_in == 1'b1)) & (out_pix_V_V_1_state == 2'd3)) | ((out_pix_V_V_1_state == 2'd1) & (out_pix_V_V_1_ack_out == 1'b1)) | ((out_pix_V_V_1_state == 2'd2) & (out_pix_V_V_1_vld_in == 1'b1)))) begin
            out_pix_V_V_1_state <= 2'd3;
        end else begin
            out_pix_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_126_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_107 <= x_1_fu_131_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_107 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        PIXNUM_reg_283 <= PIXNUM_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (cols_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (cols_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (cols_0_vld_reg == 1'b1)))) begin
        cols_0_data_reg <= cols;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cols_read_reg_273 <= cols_0_data_reg;
        rows_read_reg_278 <= rows_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((inter_pix_V_V_0_load_A == 1'b1)) begin
        inter_pix_V_V_0_payload_A <= inter_pix_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inter_pix_V_V_0_load_B == 1'b1)) begin
        inter_pix_V_V_0_payload_B <= inter_pix_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_pix_V_V_1_load_A == 1'b1)) begin
        out_pix_V_V_1_payload_A <= p_Result_s_fu_251_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((out_pix_V_V_1_load_B == 1'b1)) begin
        out_pix_V_V_1_payload_B <= p_Result_s_fu_251_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (rows_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (rows_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (rows_0_vld_reg == 1'b1)))) begin
        rows_0_data_reg <= rows;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_288 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_5_i_reg_297 <= {{tmp_3_i_fu_230_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_288 <= tmp_fu_126_p2;
        tmp_reg_288_pp0_iter1_reg <= tmp_reg_288;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_reg_288_pp0_iter2_reg <= tmp_reg_288_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((tmp_fu_126_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (out_pix_V_V_1_ack_in == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (out_pix_V_V_1_ack_in == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (out_pix_V_V_1_ack_in == 1'b1))) begin
        cols_0_ack_out = 1'b1;
    end else begin
        cols_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_288 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inter_pix_V_V_0_ack_out = 1'b1;
    end else begin
        inter_pix_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inter_pix_V_V_0_sel == 1'b1)) begin
        inter_pix_V_V_0_data_out = inter_pix_V_V_0_payload_B;
    end else begin
        inter_pix_V_V_0_data_out = inter_pix_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_reg_288 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inter_pix_V_V_TDATA_blk_n = inter_pix_V_V_0_state[1'd0];
    end else begin
        inter_pix_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_pix_V_V_1_sel == 1'b1)) begin
        out_pix_V_V_1_data_out = out_pix_V_V_1_payload_B;
    end else begin
        out_pix_V_V_1_data_out = out_pix_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((tmp_reg_288_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_pix_V_V_1_vld_in = 1'b1;
    end else begin
        out_pix_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_288_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_reg_288_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        out_pix_V_V_TDATA_blk_n = out_pix_V_V_1_state[1'd1];
    end else begin
        out_pix_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (out_pix_V_V_1_ack_in == 1'b1))) begin
        rows_0_ack_out = 1'b1;
    end else begin
        rows_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_fu_126_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((tmp_fu_126_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (out_pix_V_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PIXNUM_fu_118_p2 = ($signed(cols_read_reg_273) * $signed(rows_read_reg_278));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_reg_288 == 1'd1) & (inter_pix_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_reg_288 == 1'd1) & (inter_pix_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_reg_288 == 1'd1) & (inter_pix_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((tmp_reg_288 == 1'd1) & (inter_pix_V_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((tmp_reg_288_pp0_iter1_reg == 1'd1) & (out_pix_V_V_1_ack_in == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((tmp_reg_288_pp0_iter2_reg == 1'd1) & (out_pix_V_V_1_ack_in == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign gray_fu_246_p2 = (8'd16 + tmp_5_i_reg_297);

assign grp_fu_264_p0 = 13'd25;

assign grp_fu_264_p1 = grp_fu_264_p10;

assign grp_fu_264_p10 = new_pix_2_fu_137_p1;

assign grp_fu_264_p2 = 13'd128;

assign inter_pix_V_V_0_ack_in = inter_pix_V_V_0_state[1'd1];

assign inter_pix_V_V_0_load_A = (inter_pix_V_V_0_state_cmp_full & ~inter_pix_V_V_0_sel_wr);

assign inter_pix_V_V_0_load_B = (inter_pix_V_V_0_state_cmp_full & inter_pix_V_V_0_sel_wr);

assign inter_pix_V_V_0_sel = inter_pix_V_V_0_sel_rd;

assign inter_pix_V_V_0_state_cmp_full = ((inter_pix_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inter_pix_V_V_0_vld_in = inter_pix_V_V_TVALID;

assign inter_pix_V_V_0_vld_out = inter_pix_V_V_0_state[1'd0];

assign inter_pix_V_V_TREADY = inter_pix_V_V_0_state[1'd1];

assign new_pix_1_fu_141_p4 = {{inter_pix_V_V_0_data_out[15:8]}};

assign new_pix_2_fu_137_p1 = inter_pix_V_V_0_data_out[7:0];

assign out_pix_V_V_1_ack_in = out_pix_V_V_1_state[1'd1];

assign out_pix_V_V_1_ack_out = out_pix_V_V_TREADY;

assign out_pix_V_V_1_load_A = (out_pix_V_V_1_state_cmp_full & ~out_pix_V_V_1_sel_wr);

assign out_pix_V_V_1_load_B = (out_pix_V_V_1_state_cmp_full & out_pix_V_V_1_sel_wr);

assign out_pix_V_V_1_sel = out_pix_V_V_1_sel_rd;

assign out_pix_V_V_1_state_cmp_full = ((out_pix_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_pix_V_V_1_vld_out = out_pix_V_V_1_state[1'd0];

assign out_pix_V_V_TDATA = out_pix_V_V_1_data_out;

assign out_pix_V_V_TVALID = out_pix_V_V_1_state[1'd0];

assign p_Result_s_fu_251_p5 = {{{{{{8'd255}, {gray_fu_246_p2}}}, {gray_fu_246_p2}}}, {gray_fu_246_p2}};

assign p_shl3_i_cast_fu_169_p1 = p_shl3_i_fu_161_p3;

assign p_shl3_i_fu_161_p3 = {{tmp_2_fu_151_p4}, {6'd0}};

assign p_shl4_i_cast_fu_181_p1 = p_shl4_i_fu_173_p3;

assign p_shl4_i_fu_173_p3 = {{tmp_2_fu_151_p4}, {1'd0}};

assign p_shl_i_cast_fu_197_p1 = p_shl_i_fu_189_p3;

assign p_shl_i_fu_189_p3 = {{new_pix_1_fu_141_p4}, {7'd0}};

assign tmp1_cast_fu_211_p1 = tmp1_fu_205_p2;

assign tmp1_fu_205_p2 = (p_shl3_i_cast_fu_169_p1 + p_shl4_i_cast_fu_181_p1);

assign tmp2_fu_215_p2 = (p_shl_i_cast_fu_197_p1 + tmp_9_i_fu_185_p1);

assign tmp_2_fu_151_p4 = {{inter_pix_V_V_0_data_out[23:16]}};

assign tmp_3_i_fu_230_p2 = (tmp_add0_fu_221_p2 + tmp_add1_cast_fu_227_p1);

assign tmp_9_i_fu_185_p1 = new_pix_1_fu_141_p4;

assign tmp_add0_fu_221_p2 = (tmp2_fu_215_p2 + tmp1_cast_fu_211_p1);

assign tmp_add1_cast_fu_227_p1 = grp_fu_264_p3;

assign tmp_fu_126_p2 = (($signed(x_cast_fu_122_p1) < $signed(PIXNUM_reg_283)) ? 1'b1 : 1'b0);

assign x_1_fu_131_p2 = (x_reg_107 + 31'd1);

assign x_cast_fu_122_p1 = x_reg_107;

endmodule //sobel_filter
