-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_filter is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inter_pix_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inter_pix_V_V_TVALID : IN STD_LOGIC;
    inter_pix_V_V_TREADY : OUT STD_LOGIC;
    out_pix_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_pix_V_V_TVALID : OUT STD_LOGIC;
    out_pix_V_V_TREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_filter,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.283000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=522,HLS_SYN_LUT=536,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv13_80 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inter_pix_V_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_pix_V_V_0_vld_in : STD_LOGIC;
    signal inter_pix_V_V_0_vld_out : STD_LOGIC;
    signal inter_pix_V_V_0_ack_in : STD_LOGIC;
    signal inter_pix_V_V_0_ack_out : STD_LOGIC;
    signal inter_pix_V_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_pix_V_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_pix_V_V_0_sel_rd : STD_LOGIC := '0';
    signal inter_pix_V_V_0_sel_wr : STD_LOGIC := '0';
    signal inter_pix_V_V_0_sel : STD_LOGIC;
    signal inter_pix_V_V_0_load_A : STD_LOGIC;
    signal inter_pix_V_V_0_load_B : STD_LOGIC;
    signal inter_pix_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inter_pix_V_V_0_state_cmp_full : STD_LOGIC;
    signal out_pix_V_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_pix_V_V_1_vld_in : STD_LOGIC;
    signal out_pix_V_V_1_vld_out : STD_LOGIC;
    signal out_pix_V_V_1_ack_in : STD_LOGIC;
    signal out_pix_V_V_1_ack_out : STD_LOGIC;
    signal out_pix_V_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_pix_V_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_pix_V_V_1_sel_rd : STD_LOGIC := '0';
    signal out_pix_V_V_1_sel_wr : STD_LOGIC := '0';
    signal out_pix_V_V_1_sel : STD_LOGIC;
    signal out_pix_V_V_1_load_A : STD_LOGIC;
    signal out_pix_V_V_1_load_B : STD_LOGIC;
    signal out_pix_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_pix_V_V_1_state_cmp_full : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rows_0_vld_reg : STD_LOGIC := '0';
    signal rows_0_ack_out : STD_LOGIC;
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cols_0_vld_reg : STD_LOGIC := '0';
    signal cols_0_ack_out : STD_LOGIC;
    signal inter_pix_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pix_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_reg_288_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_reg_288_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_107 : STD_LOGIC_VECTOR (30 downto 0);
    signal cols_read_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal rows_read_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal PIXNUM_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal PIXNUM_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_1_fu_131_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_5_i_reg_297 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_251_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal x_cast_fu_122_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_151_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_i_fu_161_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_i_fu_173_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal new_pix_1_fu_141_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_i_fu_189_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal new_pix_2_fu_137_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_i_cast_fu_169_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_i_cast_fu_181_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp1_fu_205_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_i_cast_fu_197_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_i_fu_185_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_215_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_cast_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_264_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_add0_fu_221_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_add1_cast_fu_227_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i_fu_230_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal gray_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_264_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_264_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_264_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component sobel_filter_mac_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component sobel_filter_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sobel_filter_CTRL_BUS_s_axi_U : component sobel_filter_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rows => rows,
        cols => cols);

    sobel_filter_mac_bkb_U1 : component sobel_filter_mac_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_264_p0,
        din1 => grp_fu_264_p1,
        din2 => grp_fu_264_p2,
        dout => grp_fu_264_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inter_pix_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inter_pix_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inter_pix_V_V_0_ack_out = ap_const_logic_1) and (inter_pix_V_V_0_vld_out = ap_const_logic_1))) then 
                                        inter_pix_V_V_0_sel_rd <= not(inter_pix_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inter_pix_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inter_pix_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inter_pix_V_V_0_ack_in = ap_const_logic_1) and (inter_pix_V_V_0_vld_in = ap_const_logic_1))) then 
                                        inter_pix_V_V_0_sel_wr <= not(inter_pix_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inter_pix_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inter_pix_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((inter_pix_V_V_0_state = ap_const_lv2_2) and (inter_pix_V_V_0_vld_in = ap_const_logic_0)) or ((inter_pix_V_V_0_state = ap_const_lv2_3) and (inter_pix_V_V_0_vld_in = ap_const_logic_0) and (inter_pix_V_V_0_ack_out = ap_const_logic_1)))) then 
                    inter_pix_V_V_0_state <= ap_const_lv2_2;
                elsif ((((inter_pix_V_V_0_state = ap_const_lv2_1) and (inter_pix_V_V_0_ack_out = ap_const_logic_0)) or ((inter_pix_V_V_0_state = ap_const_lv2_3) and (inter_pix_V_V_0_ack_out = ap_const_logic_0) and (inter_pix_V_V_0_vld_in = ap_const_logic_1)))) then 
                    inter_pix_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inter_pix_V_V_0_vld_in = ap_const_logic_0) and (inter_pix_V_V_0_ack_out = ap_const_logic_1))) and not(((inter_pix_V_V_0_ack_out = ap_const_logic_0) and (inter_pix_V_V_0_vld_in = ap_const_logic_1))) and (inter_pix_V_V_0_state = ap_const_lv2_3)) or ((inter_pix_V_V_0_state = ap_const_lv2_1) and (inter_pix_V_V_0_ack_out = ap_const_logic_1)) or ((inter_pix_V_V_0_state = ap_const_lv2_2) and (inter_pix_V_V_0_vld_in = ap_const_logic_1)))) then 
                    inter_pix_V_V_0_state <= ap_const_lv2_3;
                else 
                    inter_pix_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_pix_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_pix_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_pix_V_V_1_ack_out = ap_const_logic_1) and (out_pix_V_V_1_vld_out = ap_const_logic_1))) then 
                                        out_pix_V_V_1_sel_rd <= not(out_pix_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_pix_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_pix_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_pix_V_V_1_ack_in = ap_const_logic_1) and (out_pix_V_V_1_vld_in = ap_const_logic_1))) then 
                                        out_pix_V_V_1_sel_wr <= not(out_pix_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_pix_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_pix_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_pix_V_V_1_state = ap_const_lv2_2) and (out_pix_V_V_1_vld_in = ap_const_logic_0)) or ((out_pix_V_V_1_state = ap_const_lv2_3) and (out_pix_V_V_1_vld_in = ap_const_logic_0) and (out_pix_V_V_1_ack_out = ap_const_logic_1)))) then 
                    out_pix_V_V_1_state <= ap_const_lv2_2;
                elsif ((((out_pix_V_V_1_state = ap_const_lv2_1) and (out_pix_V_V_1_ack_out = ap_const_logic_0)) or ((out_pix_V_V_1_state = ap_const_lv2_3) and (out_pix_V_V_1_ack_out = ap_const_logic_0) and (out_pix_V_V_1_vld_in = ap_const_logic_1)))) then 
                    out_pix_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_pix_V_V_1_vld_in = ap_const_logic_0) and (out_pix_V_V_1_ack_out = ap_const_logic_1))) and not(((out_pix_V_V_1_ack_out = ap_const_logic_0) and (out_pix_V_V_1_vld_in = ap_const_logic_1))) and (out_pix_V_V_1_state = ap_const_lv2_3)) or ((out_pix_V_V_1_state = ap_const_lv2_1) and (out_pix_V_V_1_ack_out = ap_const_logic_1)) or ((out_pix_V_V_1_state = ap_const_lv2_2) and (out_pix_V_V_1_vld_in = ap_const_logic_1)))) then 
                    out_pix_V_V_1_state <= ap_const_lv2_3;
                else 
                    out_pix_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    cols_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    rows_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    x_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_126_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_reg_107 <= x_1_fu_131_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_reg_107 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                PIXNUM_reg_283 <= PIXNUM_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (cols_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (cols_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (cols_0_vld_reg = ap_const_logic_1)))) then
                cols_0_data_reg <= cols;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cols_read_reg_273 <= cols_0_data_reg;
                rows_read_reg_278 <= rows_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inter_pix_V_V_0_load_A = ap_const_logic_1)) then
                inter_pix_V_V_0_payload_A <= inter_pix_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inter_pix_V_V_0_load_B = ap_const_logic_1)) then
                inter_pix_V_V_0_payload_B <= inter_pix_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_pix_V_V_1_load_A = ap_const_logic_1)) then
                out_pix_V_V_1_payload_A <= p_Result_s_fu_251_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_pix_V_V_1_load_B = ap_const_logic_1)) then
                out_pix_V_V_1_payload_B <= p_Result_s_fu_251_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (rows_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (rows_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (rows_0_vld_reg = ap_const_logic_1)))) then
                rows_0_data_reg <= rows;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_288 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_5_i_reg_297 <= tmp_3_i_fu_230_p2(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_288 <= tmp_fu_126_p2;
                tmp_reg_288_pp0_iter1_reg <= tmp_reg_288;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_reg_288_pp0_iter2_reg <= tmp_reg_288_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, out_pix_V_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, tmp_fu_126_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_fu_126_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((tmp_fu_126_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (out_pix_V_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    PIXNUM_fu_118_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(cols_read_reg_273) * signed(rows_read_reg_278))), 32));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inter_pix_V_V_0_vld_out, ap_enable_reg_pp0_iter1, tmp_reg_288)
    begin
                ap_block_pp0_stage0_01001 <= ((tmp_reg_288 = ap_const_lv1_1) and (inter_pix_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inter_pix_V_V_0_vld_out, ap_enable_reg_pp0_iter1, tmp_reg_288, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state6_io, ap_block_state7_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_reg_288 = ap_const_lv1_1) and (inter_pix_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inter_pix_V_V_0_vld_out, ap_enable_reg_pp0_iter1, tmp_reg_288, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state6_io, ap_block_state7_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_reg_288 = ap_const_lv1_1) and (inter_pix_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(inter_pix_V_V_0_vld_out, tmp_reg_288)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((tmp_reg_288 = ap_const_lv1_1) and (inter_pix_V_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(out_pix_V_V_1_ack_in, tmp_reg_288_pp0_iter1_reg)
    begin
                ap_block_state6_io <= ((tmp_reg_288_pp0_iter1_reg = ap_const_lv1_1) and (out_pix_V_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(out_pix_V_V_1_ack_in, tmp_reg_288_pp0_iter2_reg)
    begin
                ap_block_state7_io <= ((tmp_reg_288_pp0_iter2_reg = ap_const_lv1_1) and (out_pix_V_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(tmp_fu_126_p2)
    begin
        if ((tmp_fu_126_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(out_pix_V_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (out_pix_V_V_1_ack_in = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_pix_V_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (out_pix_V_V_1_ack_in = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    cols_0_ack_out_assign_proc : process(out_pix_V_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (out_pix_V_V_1_ack_in = ap_const_logic_1))) then 
            cols_0_ack_out <= ap_const_logic_1;
        else 
            cols_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    gray_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_5_i_reg_297));
    grp_fu_264_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_264_p1 <= grp_fu_264_p10(8 - 1 downto 0);
    grp_fu_264_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_pix_2_fu_137_p1),13));
    grp_fu_264_p2 <= ap_const_lv13_80(9 - 1 downto 0);
    inter_pix_V_V_0_ack_in <= inter_pix_V_V_0_state(1);

    inter_pix_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_288, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_288 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inter_pix_V_V_0_ack_out <= ap_const_logic_1;
        else 
            inter_pix_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inter_pix_V_V_0_data_out_assign_proc : process(inter_pix_V_V_0_payload_A, inter_pix_V_V_0_payload_B, inter_pix_V_V_0_sel)
    begin
        if ((inter_pix_V_V_0_sel = ap_const_logic_1)) then 
            inter_pix_V_V_0_data_out <= inter_pix_V_V_0_payload_B;
        else 
            inter_pix_V_V_0_data_out <= inter_pix_V_V_0_payload_A;
        end if; 
    end process;

    inter_pix_V_V_0_load_A <= (inter_pix_V_V_0_state_cmp_full and not(inter_pix_V_V_0_sel_wr));
    inter_pix_V_V_0_load_B <= (inter_pix_V_V_0_state_cmp_full and inter_pix_V_V_0_sel_wr);
    inter_pix_V_V_0_sel <= inter_pix_V_V_0_sel_rd;
    inter_pix_V_V_0_state_cmp_full <= '0' when (inter_pix_V_V_0_state = ap_const_lv2_1) else '1';
    inter_pix_V_V_0_vld_in <= inter_pix_V_V_TVALID;
    inter_pix_V_V_0_vld_out <= inter_pix_V_V_0_state(0);

    inter_pix_V_V_TDATA_blk_n_assign_proc : process(inter_pix_V_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_288)
    begin
        if (((tmp_reg_288 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inter_pix_V_V_TDATA_blk_n <= inter_pix_V_V_0_state(0);
        else 
            inter_pix_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inter_pix_V_V_TREADY <= inter_pix_V_V_0_state(1);
    new_pix_1_fu_141_p4 <= inter_pix_V_V_0_data_out(15 downto 8);
    new_pix_2_fu_137_p1 <= inter_pix_V_V_0_data_out(8 - 1 downto 0);
    out_pix_V_V_1_ack_in <= out_pix_V_V_1_state(1);
    out_pix_V_V_1_ack_out <= out_pix_V_V_TREADY;

    out_pix_V_V_1_data_out_assign_proc : process(out_pix_V_V_1_payload_A, out_pix_V_V_1_payload_B, out_pix_V_V_1_sel)
    begin
        if ((out_pix_V_V_1_sel = ap_const_logic_1)) then 
            out_pix_V_V_1_data_out <= out_pix_V_V_1_payload_B;
        else 
            out_pix_V_V_1_data_out <= out_pix_V_V_1_payload_A;
        end if; 
    end process;

    out_pix_V_V_1_load_A <= (out_pix_V_V_1_state_cmp_full and not(out_pix_V_V_1_sel_wr));
    out_pix_V_V_1_load_B <= (out_pix_V_V_1_state_cmp_full and out_pix_V_V_1_sel_wr);
    out_pix_V_V_1_sel <= out_pix_V_V_1_sel_rd;
    out_pix_V_V_1_state_cmp_full <= '0' when (out_pix_V_V_1_state = ap_const_lv2_1) else '1';

    out_pix_V_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_288_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_288_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_pix_V_V_1_vld_in <= ap_const_logic_1;
        else 
            out_pix_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_pix_V_V_1_vld_out <= out_pix_V_V_1_state(0);
    out_pix_V_V_TDATA <= out_pix_V_V_1_data_out;

    out_pix_V_V_TDATA_blk_n_assign_proc : process(out_pix_V_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_reg_288_pp0_iter1_reg, ap_enable_reg_pp0_iter3, tmp_reg_288_pp0_iter2_reg)
    begin
        if ((((tmp_reg_288_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((tmp_reg_288_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            out_pix_V_V_TDATA_blk_n <= out_pix_V_V_1_state(1);
        else 
            out_pix_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_pix_V_V_TVALID <= out_pix_V_V_1_state(0);
    p_Result_s_fu_251_p5 <= (((ap_const_lv8_FF & gray_fu_246_p2) & gray_fu_246_p2) & gray_fu_246_p2);
    p_shl3_i_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_i_fu_161_p3),15));
    p_shl3_i_fu_161_p3 <= (tmp_2_fu_151_p4 & ap_const_lv6_0);
    p_shl4_i_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_i_fu_173_p3),15));
    p_shl4_i_fu_173_p3 <= (tmp_2_fu_151_p4 & ap_const_lv1_0);
    p_shl_i_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_189_p3),16));
    p_shl_i_fu_189_p3 <= (new_pix_1_fu_141_p4 & ap_const_lv7_0);

    rows_0_ack_out_assign_proc : process(out_pix_V_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (out_pix_V_V_1_ack_in = ap_const_logic_1))) then 
            rows_0_ack_out <= ap_const_logic_1;
        else 
            rows_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_205_p2),16));
    tmp1_fu_205_p2 <= std_logic_vector(unsigned(p_shl3_i_cast_fu_169_p1) + unsigned(p_shl4_i_cast_fu_181_p1));
    tmp2_fu_215_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_197_p1) + unsigned(tmp_9_i_fu_185_p1));
    tmp_2_fu_151_p4 <= inter_pix_V_V_0_data_out(23 downto 16);
    tmp_3_i_fu_230_p2 <= std_logic_vector(unsigned(tmp_add0_fu_221_p2) + unsigned(tmp_add1_cast_fu_227_p1));
    tmp_9_i_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_pix_1_fu_141_p4),16));
    tmp_add0_fu_221_p2 <= std_logic_vector(unsigned(tmp2_fu_215_p2) + unsigned(tmp1_cast_fu_211_p1));
    tmp_add1_cast_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_264_p3),16));
    tmp_fu_126_p2 <= "1" when (signed(x_cast_fu_122_p1) < signed(PIXNUM_reg_283)) else "0";
    x_1_fu_131_p2 <= std_logic_vector(unsigned(x_reg_107) + unsigned(ap_const_lv31_1));
    x_cast_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_107),32));
end behav;
