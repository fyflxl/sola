// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sobel_filter_HH_
#define _sobel_filter_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sobel_filter_mac_bkb.h"
#include "sobel_filter_CTRL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CTRL_BUS_DATA_WIDTH = 32>
struct sobel_filter : public sc_module {
    // Port declarations 26
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > inter_pix_V_V_TDATA;
    sc_in< sc_logic > inter_pix_V_V_TVALID;
    sc_out< sc_logic > inter_pix_V_V_TREADY;
    sc_out< sc_lv<32> > out_pix_V_V_TDATA;
    sc_out< sc_logic > out_pix_V_V_TVALID;
    sc_in< sc_logic > out_pix_V_V_TREADY;
    sc_in< sc_logic > s_axi_CTRL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH/8> > s_axi_CTRL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    sobel_filter(sc_module_name name);
    SC_HAS_PROCESS(sobel_filter);

    ~sobel_filter();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sobel_filter_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>* sobel_filter_CTRL_BUS_s_axi_U;
    sobel_filter_mac_bkb<1,1,6,8,9,13>* sobel_filter_mac_bkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > inter_pix_V_V_0_data_out;
    sc_signal< sc_logic > inter_pix_V_V_0_vld_in;
    sc_signal< sc_logic > inter_pix_V_V_0_vld_out;
    sc_signal< sc_logic > inter_pix_V_V_0_ack_in;
    sc_signal< sc_logic > inter_pix_V_V_0_ack_out;
    sc_signal< sc_lv<32> > inter_pix_V_V_0_payload_A;
    sc_signal< sc_lv<32> > inter_pix_V_V_0_payload_B;
    sc_signal< sc_logic > inter_pix_V_V_0_sel_rd;
    sc_signal< sc_logic > inter_pix_V_V_0_sel_wr;
    sc_signal< sc_logic > inter_pix_V_V_0_sel;
    sc_signal< sc_logic > inter_pix_V_V_0_load_A;
    sc_signal< sc_logic > inter_pix_V_V_0_load_B;
    sc_signal< sc_lv<2> > inter_pix_V_V_0_state;
    sc_signal< sc_logic > inter_pix_V_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > out_pix_V_V_1_data_out;
    sc_signal< sc_logic > out_pix_V_V_1_vld_in;
    sc_signal< sc_logic > out_pix_V_V_1_vld_out;
    sc_signal< sc_logic > out_pix_V_V_1_ack_in;
    sc_signal< sc_logic > out_pix_V_V_1_ack_out;
    sc_signal< sc_lv<32> > out_pix_V_V_1_payload_A;
    sc_signal< sc_lv<32> > out_pix_V_V_1_payload_B;
    sc_signal< sc_logic > out_pix_V_V_1_sel_rd;
    sc_signal< sc_logic > out_pix_V_V_1_sel_wr;
    sc_signal< sc_logic > out_pix_V_V_1_sel;
    sc_signal< sc_logic > out_pix_V_V_1_load_A;
    sc_signal< sc_logic > out_pix_V_V_1_load_B;
    sc_signal< sc_lv<2> > out_pix_V_V_1_state;
    sc_signal< sc_logic > out_pix_V_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > rows;
    sc_signal< sc_lv<32> > rows_0_data_reg;
    sc_signal< sc_logic > rows_0_vld_reg;
    sc_signal< sc_logic > rows_0_ack_out;
    sc_signal< sc_lv<32> > cols;
    sc_signal< sc_lv<32> > cols_0_data_reg;
    sc_signal< sc_logic > cols_0_vld_reg;
    sc_signal< sc_logic > cols_0_ack_out;
    sc_signal< sc_logic > inter_pix_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_reg_288;
    sc_signal< sc_logic > out_pix_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > tmp_reg_288_pp0_iter1_reg;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > tmp_reg_288_pp0_iter2_reg;
    sc_signal< sc_lv<31> > x_reg_107;
    sc_signal< sc_lv<32> > cols_read_reg_273;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > rows_read_reg_278;
    sc_signal< sc_lv<32> > PIXNUM_fu_118_p2;
    sc_signal< sc_lv<32> > PIXNUM_reg_283;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_fu_126_p2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state6_io;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state7_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<31> > x_1_fu_131_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > tmp_5_i_reg_297;
    sc_signal< sc_lv<32> > p_Result_s_fu_251_p5;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > x_cast_fu_122_p1;
    sc_signal< sc_lv<8> > tmp_2_fu_151_p4;
    sc_signal< sc_lv<14> > p_shl3_i_fu_161_p3;
    sc_signal< sc_lv<9> > p_shl4_i_fu_173_p3;
    sc_signal< sc_lv<8> > new_pix_1_fu_141_p4;
    sc_signal< sc_lv<15> > p_shl_i_fu_189_p3;
    sc_signal< sc_lv<8> > new_pix_2_fu_137_p1;
    sc_signal< sc_lv<15> > p_shl3_i_cast_fu_169_p1;
    sc_signal< sc_lv<15> > p_shl4_i_cast_fu_181_p1;
    sc_signal< sc_lv<15> > tmp1_fu_205_p2;
    sc_signal< sc_lv<16> > p_shl_i_cast_fu_197_p1;
    sc_signal< sc_lv<16> > tmp_9_i_fu_185_p1;
    sc_signal< sc_lv<16> > tmp2_fu_215_p2;
    sc_signal< sc_lv<16> > tmp1_cast_fu_211_p1;
    sc_signal< sc_lv<13> > grp_fu_264_p3;
    sc_signal< sc_lv<16> > tmp_add0_fu_221_p2;
    sc_signal< sc_lv<16> > tmp_add1_cast_fu_227_p1;
    sc_signal< sc_lv<16> > tmp_3_i_fu_230_p2;
    sc_signal< sc_lv<8> > gray_fu_246_p2;
    sc_signal< sc_lv<6> > grp_fu_264_p0;
    sc_signal< sc_lv<8> > grp_fu_264_p1;
    sc_signal< sc_lv<9> > grp_fu_264_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<13> > grp_fu_264_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_state8;
    static const sc_lv<6> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<8> ap_const_lv8_10;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<13> ap_const_lv13_19;
    static const sc_lv<13> ap_const_lv13_80;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_PIXNUM_fu_118_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state6_io();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_block_state7_io();
    void thread_ap_block_state7_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_cols_0_ack_out();
    void thread_gray_fu_246_p2();
    void thread_grp_fu_264_p0();
    void thread_grp_fu_264_p1();
    void thread_grp_fu_264_p10();
    void thread_grp_fu_264_p2();
    void thread_inter_pix_V_V_0_ack_in();
    void thread_inter_pix_V_V_0_ack_out();
    void thread_inter_pix_V_V_0_data_out();
    void thread_inter_pix_V_V_0_load_A();
    void thread_inter_pix_V_V_0_load_B();
    void thread_inter_pix_V_V_0_sel();
    void thread_inter_pix_V_V_0_state_cmp_full();
    void thread_inter_pix_V_V_0_vld_in();
    void thread_inter_pix_V_V_0_vld_out();
    void thread_inter_pix_V_V_TDATA_blk_n();
    void thread_inter_pix_V_V_TREADY();
    void thread_new_pix_1_fu_141_p4();
    void thread_new_pix_2_fu_137_p1();
    void thread_out_pix_V_V_1_ack_in();
    void thread_out_pix_V_V_1_ack_out();
    void thread_out_pix_V_V_1_data_out();
    void thread_out_pix_V_V_1_load_A();
    void thread_out_pix_V_V_1_load_B();
    void thread_out_pix_V_V_1_sel();
    void thread_out_pix_V_V_1_state_cmp_full();
    void thread_out_pix_V_V_1_vld_in();
    void thread_out_pix_V_V_1_vld_out();
    void thread_out_pix_V_V_TDATA();
    void thread_out_pix_V_V_TDATA_blk_n();
    void thread_out_pix_V_V_TVALID();
    void thread_p_Result_s_fu_251_p5();
    void thread_p_shl3_i_cast_fu_169_p1();
    void thread_p_shl3_i_fu_161_p3();
    void thread_p_shl4_i_cast_fu_181_p1();
    void thread_p_shl4_i_fu_173_p3();
    void thread_p_shl_i_cast_fu_197_p1();
    void thread_p_shl_i_fu_189_p3();
    void thread_rows_0_ack_out();
    void thread_tmp1_cast_fu_211_p1();
    void thread_tmp1_fu_205_p2();
    void thread_tmp2_fu_215_p2();
    void thread_tmp_2_fu_151_p4();
    void thread_tmp_3_i_fu_230_p2();
    void thread_tmp_9_i_fu_185_p1();
    void thread_tmp_add0_fu_221_p2();
    void thread_tmp_add1_cast_fu_227_p1();
    void thread_tmp_fu_126_p2();
    void thread_x_1_fu_131_p2();
    void thread_x_cast_fu_122_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
