// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sobel_filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sobel_filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sobel_filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> sobel_filter::ap_ST_fsm_state1 = "1";
const sc_lv<6> sobel_filter::ap_ST_fsm_state2 = "10";
const sc_lv<6> sobel_filter::ap_ST_fsm_state3 = "100";
const sc_lv<6> sobel_filter::ap_ST_fsm_pp0_stage0 = "1000";
const sc_lv<6> sobel_filter::ap_ST_fsm_state8 = "10000";
const sc_lv<6> sobel_filter::ap_ST_fsm_state9 = "100000";
const sc_lv<32> sobel_filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool sobel_filter::ap_const_boolean_1 = true;
const sc_lv<1> sobel_filter::ap_const_lv1_0 = "0";
const sc_lv<1> sobel_filter::ap_const_lv1_1 = "1";
const sc_lv<2> sobel_filter::ap_const_lv2_0 = "00";
const sc_lv<2> sobel_filter::ap_const_lv2_2 = "10";
const sc_lv<2> sobel_filter::ap_const_lv2_3 = "11";
const sc_lv<2> sobel_filter::ap_const_lv2_1 = "1";
const sc_lv<32> sobel_filter::ap_const_lv32_3 = "11";
const bool sobel_filter::ap_const_boolean_0 = false;
const int sobel_filter::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> sobel_filter::ap_const_lv32_1 = "1";
const sc_lv<32> sobel_filter::ap_const_lv32_2 = "10";
const sc_lv<31> sobel_filter::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<31> sobel_filter::ap_const_lv31_1 = "1";
const sc_lv<32> sobel_filter::ap_const_lv32_8 = "1000";
const sc_lv<32> sobel_filter::ap_const_lv32_F = "1111";
const sc_lv<32> sobel_filter::ap_const_lv32_10 = "10000";
const sc_lv<32> sobel_filter::ap_const_lv32_17 = "10111";
const sc_lv<6> sobel_filter::ap_const_lv6_0 = "000000";
const sc_lv<7> sobel_filter::ap_const_lv7_0 = "0000000";
const sc_lv<8> sobel_filter::ap_const_lv8_10 = "10000";
const sc_lv<8> sobel_filter::ap_const_lv8_FF = "11111111";
const sc_lv<13> sobel_filter::ap_const_lv13_19 = "11001";
const sc_lv<13> sobel_filter::ap_const_lv13_80 = "10000000";
const sc_lv<32> sobel_filter::ap_const_lv32_5 = "101";

sobel_filter::sobel_filter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sobel_filter_CTRL_BUS_s_axi_U = new sobel_filter_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("sobel_filter_CTRL_BUS_s_axi_U");
    sobel_filter_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    sobel_filter_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    sobel_filter_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    sobel_filter_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    sobel_filter_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    sobel_filter_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    sobel_filter_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    sobel_filter_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    sobel_filter_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    sobel_filter_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    sobel_filter_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    sobel_filter_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    sobel_filter_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    sobel_filter_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    sobel_filter_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    sobel_filter_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    sobel_filter_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    sobel_filter_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    sobel_filter_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    sobel_filter_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_filter_CTRL_BUS_s_axi_U->ap_start(ap_start);
    sobel_filter_CTRL_BUS_s_axi_U->interrupt(interrupt);
    sobel_filter_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    sobel_filter_CTRL_BUS_s_axi_U->ap_done(ap_done);
    sobel_filter_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    sobel_filter_CTRL_BUS_s_axi_U->rows(rows);
    sobel_filter_CTRL_BUS_s_axi_U->cols(cols);
    sobel_filter_mac_bkb_U1 = new sobel_filter_mac_bkb<1,1,6,8,9,13>("sobel_filter_mac_bkb_U1");
    sobel_filter_mac_bkb_U1->din0(grp_fu_264_p0);
    sobel_filter_mac_bkb_U1->din1(grp_fu_264_p1);
    sobel_filter_mac_bkb_U1->din2(grp_fu_264_p2);
    sobel_filter_mac_bkb_U1->dout(grp_fu_264_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_PIXNUM_fu_118_p2);
    sensitive << ( cols_read_reg_273 );
    sensitive << ( rows_read_reg_278 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( inter_pix_V_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_288 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( inter_pix_V_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_288 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( inter_pix_V_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_288 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);
    sensitive << ( inter_pix_V_V_0_vld_out );
    sensitive << ( tmp_reg_288 );

    SC_METHOD(thread_ap_block_state6_io);
    sensitive << ( out_pix_V_V_1_ack_in );
    sensitive << ( tmp_reg_288_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state7_io);
    sensitive << ( out_pix_V_V_1_ack_in );
    sensitive << ( tmp_reg_288_pp0_iter2_reg );

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter3);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state4);
    sensitive << ( tmp_fu_126_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( out_pix_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_pix_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_cols_0_ack_out);
    sensitive << ( out_pix_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_gray_fu_246_p2);
    sensitive << ( tmp_5_i_reg_297 );

    SC_METHOD(thread_grp_fu_264_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_288 );

    SC_METHOD(thread_grp_fu_264_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_288 );
    sensitive << ( grp_fu_264_p10 );

    SC_METHOD(thread_grp_fu_264_p10);
    sensitive << ( new_pix_2_fu_137_p1 );

    SC_METHOD(thread_grp_fu_264_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_288 );

    SC_METHOD(thread_inter_pix_V_V_0_ack_in);
    sensitive << ( inter_pix_V_V_0_state );

    SC_METHOD(thread_inter_pix_V_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_288 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_inter_pix_V_V_0_data_out);
    sensitive << ( inter_pix_V_V_0_payload_A );
    sensitive << ( inter_pix_V_V_0_payload_B );
    sensitive << ( inter_pix_V_V_0_sel );

    SC_METHOD(thread_inter_pix_V_V_0_load_A);
    sensitive << ( inter_pix_V_V_0_sel_wr );
    sensitive << ( inter_pix_V_V_0_state_cmp_full );

    SC_METHOD(thread_inter_pix_V_V_0_load_B);
    sensitive << ( inter_pix_V_V_0_sel_wr );
    sensitive << ( inter_pix_V_V_0_state_cmp_full );

    SC_METHOD(thread_inter_pix_V_V_0_sel);
    sensitive << ( inter_pix_V_V_0_sel_rd );

    SC_METHOD(thread_inter_pix_V_V_0_state_cmp_full);
    sensitive << ( inter_pix_V_V_0_state );

    SC_METHOD(thread_inter_pix_V_V_0_vld_in);
    sensitive << ( inter_pix_V_V_TVALID );

    SC_METHOD(thread_inter_pix_V_V_0_vld_out);
    sensitive << ( inter_pix_V_V_0_state );

    SC_METHOD(thread_inter_pix_V_V_TDATA_blk_n);
    sensitive << ( inter_pix_V_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_reg_288 );

    SC_METHOD(thread_inter_pix_V_V_TREADY);
    sensitive << ( inter_pix_V_V_0_state );

    SC_METHOD(thread_new_pix_1_fu_141_p4);
    sensitive << ( inter_pix_V_V_0_data_out );

    SC_METHOD(thread_new_pix_2_fu_137_p1);
    sensitive << ( inter_pix_V_V_0_data_out );

    SC_METHOD(thread_out_pix_V_V_1_ack_in);
    sensitive << ( out_pix_V_V_1_state );

    SC_METHOD(thread_out_pix_V_V_1_ack_out);
    sensitive << ( out_pix_V_V_TREADY );

    SC_METHOD(thread_out_pix_V_V_1_data_out);
    sensitive << ( out_pix_V_V_1_payload_A );
    sensitive << ( out_pix_V_V_1_payload_B );
    sensitive << ( out_pix_V_V_1_sel );

    SC_METHOD(thread_out_pix_V_V_1_load_A);
    sensitive << ( out_pix_V_V_1_sel_wr );
    sensitive << ( out_pix_V_V_1_state_cmp_full );

    SC_METHOD(thread_out_pix_V_V_1_load_B);
    sensitive << ( out_pix_V_V_1_sel_wr );
    sensitive << ( out_pix_V_V_1_state_cmp_full );

    SC_METHOD(thread_out_pix_V_V_1_sel);
    sensitive << ( out_pix_V_V_1_sel_rd );

    SC_METHOD(thread_out_pix_V_V_1_state_cmp_full);
    sensitive << ( out_pix_V_V_1_state );

    SC_METHOD(thread_out_pix_V_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_288_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_pix_V_V_1_vld_out);
    sensitive << ( out_pix_V_V_1_state );

    SC_METHOD(thread_out_pix_V_V_TDATA);
    sensitive << ( out_pix_V_V_1_data_out );

    SC_METHOD(thread_out_pix_V_V_TDATA_blk_n);
    sensitive << ( out_pix_V_V_1_state );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_288_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( tmp_reg_288_pp0_iter2_reg );

    SC_METHOD(thread_out_pix_V_V_TVALID);
    sensitive << ( out_pix_V_V_1_state );

    SC_METHOD(thread_p_Result_s_fu_251_p5);
    sensitive << ( gray_fu_246_p2 );

    SC_METHOD(thread_p_shl3_i_cast_fu_169_p1);
    sensitive << ( p_shl3_i_fu_161_p3 );

    SC_METHOD(thread_p_shl3_i_fu_161_p3);
    sensitive << ( tmp_2_fu_151_p4 );

    SC_METHOD(thread_p_shl4_i_cast_fu_181_p1);
    sensitive << ( p_shl4_i_fu_173_p3 );

    SC_METHOD(thread_p_shl4_i_fu_173_p3);
    sensitive << ( tmp_2_fu_151_p4 );

    SC_METHOD(thread_p_shl_i_cast_fu_197_p1);
    sensitive << ( p_shl_i_fu_189_p3 );

    SC_METHOD(thread_p_shl_i_fu_189_p3);
    sensitive << ( new_pix_1_fu_141_p4 );

    SC_METHOD(thread_rows_0_ack_out);
    sensitive << ( out_pix_V_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_tmp1_cast_fu_211_p1);
    sensitive << ( tmp1_fu_205_p2 );

    SC_METHOD(thread_tmp1_fu_205_p2);
    sensitive << ( p_shl3_i_cast_fu_169_p1 );
    sensitive << ( p_shl4_i_cast_fu_181_p1 );

    SC_METHOD(thread_tmp2_fu_215_p2);
    sensitive << ( p_shl_i_cast_fu_197_p1 );
    sensitive << ( tmp_9_i_fu_185_p1 );

    SC_METHOD(thread_tmp_2_fu_151_p4);
    sensitive << ( inter_pix_V_V_0_data_out );

    SC_METHOD(thread_tmp_3_i_fu_230_p2);
    sensitive << ( tmp_add0_fu_221_p2 );
    sensitive << ( tmp_add1_cast_fu_227_p1 );

    SC_METHOD(thread_tmp_9_i_fu_185_p1);
    sensitive << ( new_pix_1_fu_141_p4 );

    SC_METHOD(thread_tmp_add0_fu_221_p2);
    sensitive << ( tmp2_fu_215_p2 );
    sensitive << ( tmp1_cast_fu_211_p1 );

    SC_METHOD(thread_tmp_add1_cast_fu_227_p1);
    sensitive << ( grp_fu_264_p3 );

    SC_METHOD(thread_tmp_fu_126_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( PIXNUM_reg_283 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( x_cast_fu_122_p1 );

    SC_METHOD(thread_x_1_fu_131_p2);
    sensitive << ( x_reg_107 );

    SC_METHOD(thread_x_cast_fu_122_p1);
    sensitive << ( x_reg_107 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_pix_V_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( tmp_fu_126_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state9 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000001";
    inter_pix_V_V_0_sel_rd = SC_LOGIC_0;
    inter_pix_V_V_0_sel_wr = SC_LOGIC_0;
    inter_pix_V_V_0_state = "00";
    out_pix_V_V_1_sel_rd = SC_LOGIC_0;
    out_pix_V_V_1_sel_wr = SC_LOGIC_0;
    out_pix_V_V_1_state = "00";
    rows_0_data_reg = "00000000000000000000000000000000";
    rows_0_vld_reg = SC_LOGIC_0;
    cols_0_data_reg = "00000000000000000000000000000000";
    cols_0_vld_reg = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sobel_filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inter_pix_V_V_TDATA, "(port)inter_pix_V_V_TDATA");
    sc_trace(mVcdFile, inter_pix_V_V_TVALID, "(port)inter_pix_V_V_TVALID");
    sc_trace(mVcdFile, inter_pix_V_V_TREADY, "(port)inter_pix_V_V_TREADY");
    sc_trace(mVcdFile, out_pix_V_V_TDATA, "(port)out_pix_V_V_TDATA");
    sc_trace(mVcdFile, out_pix_V_V_TVALID, "(port)out_pix_V_V_TVALID");
    sc_trace(mVcdFile, out_pix_V_V_TREADY, "(port)out_pix_V_V_TREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inter_pix_V_V_0_data_out, "inter_pix_V_V_0_data_out");
    sc_trace(mVcdFile, inter_pix_V_V_0_vld_in, "inter_pix_V_V_0_vld_in");
    sc_trace(mVcdFile, inter_pix_V_V_0_vld_out, "inter_pix_V_V_0_vld_out");
    sc_trace(mVcdFile, inter_pix_V_V_0_ack_in, "inter_pix_V_V_0_ack_in");
    sc_trace(mVcdFile, inter_pix_V_V_0_ack_out, "inter_pix_V_V_0_ack_out");
    sc_trace(mVcdFile, inter_pix_V_V_0_payload_A, "inter_pix_V_V_0_payload_A");
    sc_trace(mVcdFile, inter_pix_V_V_0_payload_B, "inter_pix_V_V_0_payload_B");
    sc_trace(mVcdFile, inter_pix_V_V_0_sel_rd, "inter_pix_V_V_0_sel_rd");
    sc_trace(mVcdFile, inter_pix_V_V_0_sel_wr, "inter_pix_V_V_0_sel_wr");
    sc_trace(mVcdFile, inter_pix_V_V_0_sel, "inter_pix_V_V_0_sel");
    sc_trace(mVcdFile, inter_pix_V_V_0_load_A, "inter_pix_V_V_0_load_A");
    sc_trace(mVcdFile, inter_pix_V_V_0_load_B, "inter_pix_V_V_0_load_B");
    sc_trace(mVcdFile, inter_pix_V_V_0_state, "inter_pix_V_V_0_state");
    sc_trace(mVcdFile, inter_pix_V_V_0_state_cmp_full, "inter_pix_V_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_pix_V_V_1_data_out, "out_pix_V_V_1_data_out");
    sc_trace(mVcdFile, out_pix_V_V_1_vld_in, "out_pix_V_V_1_vld_in");
    sc_trace(mVcdFile, out_pix_V_V_1_vld_out, "out_pix_V_V_1_vld_out");
    sc_trace(mVcdFile, out_pix_V_V_1_ack_in, "out_pix_V_V_1_ack_in");
    sc_trace(mVcdFile, out_pix_V_V_1_ack_out, "out_pix_V_V_1_ack_out");
    sc_trace(mVcdFile, out_pix_V_V_1_payload_A, "out_pix_V_V_1_payload_A");
    sc_trace(mVcdFile, out_pix_V_V_1_payload_B, "out_pix_V_V_1_payload_B");
    sc_trace(mVcdFile, out_pix_V_V_1_sel_rd, "out_pix_V_V_1_sel_rd");
    sc_trace(mVcdFile, out_pix_V_V_1_sel_wr, "out_pix_V_V_1_sel_wr");
    sc_trace(mVcdFile, out_pix_V_V_1_sel, "out_pix_V_V_1_sel");
    sc_trace(mVcdFile, out_pix_V_V_1_load_A, "out_pix_V_V_1_load_A");
    sc_trace(mVcdFile, out_pix_V_V_1_load_B, "out_pix_V_V_1_load_B");
    sc_trace(mVcdFile, out_pix_V_V_1_state, "out_pix_V_V_1_state");
    sc_trace(mVcdFile, out_pix_V_V_1_state_cmp_full, "out_pix_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, rows, "rows");
    sc_trace(mVcdFile, rows_0_data_reg, "rows_0_data_reg");
    sc_trace(mVcdFile, rows_0_vld_reg, "rows_0_vld_reg");
    sc_trace(mVcdFile, rows_0_ack_out, "rows_0_ack_out");
    sc_trace(mVcdFile, cols, "cols");
    sc_trace(mVcdFile, cols_0_data_reg, "cols_0_data_reg");
    sc_trace(mVcdFile, cols_0_vld_reg, "cols_0_vld_reg");
    sc_trace(mVcdFile, cols_0_ack_out, "cols_0_ack_out");
    sc_trace(mVcdFile, inter_pix_V_V_TDATA_blk_n, "inter_pix_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_reg_288, "tmp_reg_288");
    sc_trace(mVcdFile, out_pix_V_V_TDATA_blk_n, "out_pix_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, tmp_reg_288_pp0_iter1_reg, "tmp_reg_288_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, tmp_reg_288_pp0_iter2_reg, "tmp_reg_288_pp0_iter2_reg");
    sc_trace(mVcdFile, x_reg_107, "x_reg_107");
    sc_trace(mVcdFile, cols_read_reg_273, "cols_read_reg_273");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, rows_read_reg_278, "rows_read_reg_278");
    sc_trace(mVcdFile, PIXNUM_fu_118_p2, "PIXNUM_fu_118_p2");
    sc_trace(mVcdFile, PIXNUM_reg_283, "PIXNUM_reg_283");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_126_p2, "tmp_fu_126_p2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter0, "ap_block_state4_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter2, "ap_block_state6_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state6_io, "ap_block_state6_io");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter3, "ap_block_state7_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state7_io, "ap_block_state7_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, x_1_fu_131_p2, "x_1_fu_131_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_5_i_reg_297, "tmp_5_i_reg_297");
    sc_trace(mVcdFile, p_Result_s_fu_251_p5, "p_Result_s_fu_251_p5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state4, "ap_condition_pp0_exit_iter0_state4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, x_cast_fu_122_p1, "x_cast_fu_122_p1");
    sc_trace(mVcdFile, tmp_2_fu_151_p4, "tmp_2_fu_151_p4");
    sc_trace(mVcdFile, p_shl3_i_fu_161_p3, "p_shl3_i_fu_161_p3");
    sc_trace(mVcdFile, p_shl4_i_fu_173_p3, "p_shl4_i_fu_173_p3");
    sc_trace(mVcdFile, new_pix_1_fu_141_p4, "new_pix_1_fu_141_p4");
    sc_trace(mVcdFile, p_shl_i_fu_189_p3, "p_shl_i_fu_189_p3");
    sc_trace(mVcdFile, new_pix_2_fu_137_p1, "new_pix_2_fu_137_p1");
    sc_trace(mVcdFile, p_shl3_i_cast_fu_169_p1, "p_shl3_i_cast_fu_169_p1");
    sc_trace(mVcdFile, p_shl4_i_cast_fu_181_p1, "p_shl4_i_cast_fu_181_p1");
    sc_trace(mVcdFile, tmp1_fu_205_p2, "tmp1_fu_205_p2");
    sc_trace(mVcdFile, p_shl_i_cast_fu_197_p1, "p_shl_i_cast_fu_197_p1");
    sc_trace(mVcdFile, tmp_9_i_fu_185_p1, "tmp_9_i_fu_185_p1");
    sc_trace(mVcdFile, tmp2_fu_215_p2, "tmp2_fu_215_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_211_p1, "tmp1_cast_fu_211_p1");
    sc_trace(mVcdFile, grp_fu_264_p3, "grp_fu_264_p3");
    sc_trace(mVcdFile, tmp_add0_fu_221_p2, "tmp_add0_fu_221_p2");
    sc_trace(mVcdFile, tmp_add1_cast_fu_227_p1, "tmp_add1_cast_fu_227_p1");
    sc_trace(mVcdFile, tmp_3_i_fu_230_p2, "tmp_3_i_fu_230_p2");
    sc_trace(mVcdFile, gray_fu_246_p2, "gray_fu_246_p2");
    sc_trace(mVcdFile, grp_fu_264_p0, "grp_fu_264_p0");
    sc_trace(mVcdFile, grp_fu_264_p1, "grp_fu_264_p1");
    sc_trace(mVcdFile, grp_fu_264_p2, "grp_fu_264_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_264_p10, "grp_fu_264_p10");
#endif

    }
    mHdltvinHandle.open("sobel_filter.hdltvin.dat");
    mHdltvoutHandle.open("sobel_filter.hdltvout.dat");
}

sobel_filter::~sobel_filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sobel_filter_CTRL_BUS_s_axi_U;
    delete sobel_filter_mac_bkb_U1;
}

void sobel_filter::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sobel_filter::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state4.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state4.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state4.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inter_pix_V_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_vld_out.read()))) {
            inter_pix_V_V_0_sel_rd =  (sc_logic) (~inter_pix_V_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inter_pix_V_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_ack_in.read()))) {
            inter_pix_V_V_0_sel_wr =  (sc_logic) (~inter_pix_V_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inter_pix_V_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inter_pix_V_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inter_pix_V_V_0_state.read(), ap_const_lv2_2)))) {
            inter_pix_V_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inter_pix_V_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inter_pix_V_V_0_state.read(), ap_const_lv2_1)))) {
            inter_pix_V_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inter_pix_V_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inter_pix_V_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inter_pix_V_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_ack_out.read()))))) {
            inter_pix_V_V_0_state = ap_const_lv2_3;
        } else {
            inter_pix_V_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_pix_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_vld_out.read()))) {
            out_pix_V_V_1_sel_rd =  (sc_logic) (~out_pix_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_pix_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_ack_in.read()))) {
            out_pix_V_V_1_sel_wr =  (sc_logic) (~out_pix_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_pix_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_pix_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_pix_V_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_pix_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_pix_V_V_1_state.read())))) {
            out_pix_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_pix_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_pix_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_pix_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_pix_V_V_1_state.read())))) {
            out_pix_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_pix_V_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_pix_V_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_pix_V_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_pix_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_pix_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_ack_out.read()))))) {
            out_pix_V_V_1_state = ap_const_lv2_3;
        } else {
            out_pix_V_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_126_p2.read()))) {
        x_reg_107 = x_1_fu_131_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_reg_107 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        PIXNUM_reg_283 = PIXNUM_fu_118_p2.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, cols_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, cols_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, cols_0_ack_out.read())))) {
        cols_0_data_reg = cols.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cols_read_reg_273 = cols_0_data_reg.read();
        rows_read_reg_278 = rows_0_data_reg.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_load_A.read())) {
        inter_pix_V_V_0_payload_A = inter_pix_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_load_B.read())) {
        inter_pix_V_V_0_payload_B = inter_pix_V_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_load_A.read())) {
        out_pix_V_V_1_payload_A = p_Result_s_fu_251_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_load_B.read())) {
        out_pix_V_V_1_payload_B = p_Result_s_fu_251_p5.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, rows_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, rows_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, rows_0_ack_out.read())))) {
        rows_0_data_reg = rows.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_5_i_reg_297 = tmp_3_i_fu_230_p2.read().range(15, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_288 = tmp_fu_126_p2.read();
        tmp_reg_288_pp0_iter1_reg = tmp_reg_288.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        tmp_reg_288_pp0_iter2_reg = tmp_reg_288_pp0_iter1_reg.read();
    }
}

void sobel_filter::thread_PIXNUM_fu_118_p2() {
    PIXNUM_fu_118_p2 = (!cols_read_reg_273.read().is_01() || !rows_read_reg_278.read().is_01())? sc_lv<32>(): sc_bigint<32>(cols_read_reg_273.read()) * sc_bigint<32>(rows_read_reg_278.read());
}

void sobel_filter::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[3];
}

void sobel_filter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sobel_filter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sobel_filter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sobel_filter::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[5];
}

void sobel_filter::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_vld_out.read()));
}

void sobel_filter::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state6_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read())));
}

void sobel_filter::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state6_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read())));
}

void sobel_filter::thread_ap_block_state4_pp0_stage0_iter0() {
    ap_block_state4_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inter_pix_V_V_0_vld_out.read()));
}

void sobel_filter::thread_ap_block_state6_io() {
    ap_block_state6_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_pix_V_V_1_ack_in.read()));
}

void sobel_filter::thread_ap_block_state6_pp0_stage0_iter2() {
    ap_block_state6_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_block_state7_io() {
    ap_block_state7_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288_pp0_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_pix_V_V_1_ack_in.read()));
}

void sobel_filter::thread_ap_block_state7_pp0_stage0_iter3() {
    ap_block_state7_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void sobel_filter::thread_ap_condition_pp0_exit_iter0_state4() {
    if (esl_seteq<1,1,1>(tmp_fu_126_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state4 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state4 = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(out_pix_V_V_1_ack_in.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void sobel_filter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(out_pix_V_V_1_ack_in.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sobel_filter::thread_cols_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(out_pix_V_V_1_ack_in.read(), ap_const_logic_1))) {
        cols_0_ack_out = ap_const_logic_1;
    } else {
        cols_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_gray_fu_246_p2() {
    gray_fu_246_p2 = (!ap_const_lv8_10.is_01() || !tmp_5_i_reg_297.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_10) + sc_biguint<8>(tmp_5_i_reg_297.read()));
}

void sobel_filter::thread_grp_fu_264_p0() {
    grp_fu_264_p0 =  (sc_lv<6>) (ap_const_lv13_19);
}

void sobel_filter::thread_grp_fu_264_p1() {
    grp_fu_264_p1 =  (sc_lv<8>) (grp_fu_264_p10.read());
}

void sobel_filter::thread_grp_fu_264_p10() {
    grp_fu_264_p10 = esl_zext<13,8>(new_pix_2_fu_137_p1.read());
}

void sobel_filter::thread_grp_fu_264_p2() {
    grp_fu_264_p2 =  (sc_lv<9>) (ap_const_lv13_80);
}

void sobel_filter::thread_inter_pix_V_V_0_ack_in() {
    inter_pix_V_V_0_ack_in = inter_pix_V_V_0_state.read()[1];
}

void sobel_filter::thread_inter_pix_V_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inter_pix_V_V_0_ack_out = ap_const_logic_1;
    } else {
        inter_pix_V_V_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_inter_pix_V_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inter_pix_V_V_0_sel.read())) {
        inter_pix_V_V_0_data_out = inter_pix_V_V_0_payload_B.read();
    } else {
        inter_pix_V_V_0_data_out = inter_pix_V_V_0_payload_A.read();
    }
}

void sobel_filter::thread_inter_pix_V_V_0_load_A() {
    inter_pix_V_V_0_load_A = (inter_pix_V_V_0_state_cmp_full.read() & ~inter_pix_V_V_0_sel_wr.read());
}

void sobel_filter::thread_inter_pix_V_V_0_load_B() {
    inter_pix_V_V_0_load_B = (inter_pix_V_V_0_sel_wr.read() & inter_pix_V_V_0_state_cmp_full.read());
}

void sobel_filter::thread_inter_pix_V_V_0_sel() {
    inter_pix_V_V_0_sel = inter_pix_V_V_0_sel_rd.read();
}

void sobel_filter::thread_inter_pix_V_V_0_state_cmp_full() {
    inter_pix_V_V_0_state_cmp_full =  (sc_logic) ((!inter_pix_V_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inter_pix_V_V_0_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_inter_pix_V_V_0_vld_in() {
    inter_pix_V_V_0_vld_in = inter_pix_V_V_TVALID.read();
}

void sobel_filter::thread_inter_pix_V_V_0_vld_out() {
    inter_pix_V_V_0_vld_out = inter_pix_V_V_0_state.read()[0];
}

void sobel_filter::thread_inter_pix_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288.read()))) {
        inter_pix_V_V_TDATA_blk_n = inter_pix_V_V_0_state.read()[0];
    } else {
        inter_pix_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void sobel_filter::thread_inter_pix_V_V_TREADY() {
    inter_pix_V_V_TREADY = inter_pix_V_V_0_state.read()[1];
}

void sobel_filter::thread_new_pix_1_fu_141_p4() {
    new_pix_1_fu_141_p4 = inter_pix_V_V_0_data_out.read().range(15, 8);
}

void sobel_filter::thread_new_pix_2_fu_137_p1() {
    new_pix_2_fu_137_p1 = inter_pix_V_V_0_data_out.read().range(8-1, 0);
}

void sobel_filter::thread_out_pix_V_V_1_ack_in() {
    out_pix_V_V_1_ack_in = out_pix_V_V_1_state.read()[1];
}

void sobel_filter::thread_out_pix_V_V_1_ack_out() {
    out_pix_V_V_1_ack_out = out_pix_V_V_TREADY.read();
}

void sobel_filter::thread_out_pix_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_pix_V_V_1_sel.read())) {
        out_pix_V_V_1_data_out = out_pix_V_V_1_payload_B.read();
    } else {
        out_pix_V_V_1_data_out = out_pix_V_V_1_payload_A.read();
    }
}

void sobel_filter::thread_out_pix_V_V_1_load_A() {
    out_pix_V_V_1_load_A = (out_pix_V_V_1_state_cmp_full.read() & ~out_pix_V_V_1_sel_wr.read());
}

void sobel_filter::thread_out_pix_V_V_1_load_B() {
    out_pix_V_V_1_load_B = (out_pix_V_V_1_sel_wr.read() & out_pix_V_V_1_state_cmp_full.read());
}

void sobel_filter::thread_out_pix_V_V_1_sel() {
    out_pix_V_V_1_sel = out_pix_V_V_1_sel_rd.read();
}

void sobel_filter::thread_out_pix_V_V_1_state_cmp_full() {
    out_pix_V_V_1_state_cmp_full =  (sc_logic) ((!out_pix_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_pix_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_out_pix_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_pix_V_V_1_vld_in = ap_const_logic_1;
    } else {
        out_pix_V_V_1_vld_in = ap_const_logic_0;
    }
}

void sobel_filter::thread_out_pix_V_V_1_vld_out() {
    out_pix_V_V_1_vld_out = out_pix_V_V_1_state.read()[0];
}

void sobel_filter::thread_out_pix_V_V_TDATA() {
    out_pix_V_V_TDATA = out_pix_V_V_1_data_out.read();
}

void sobel_filter::thread_out_pix_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288_pp0_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_288_pp0_iter2_reg.read())))) {
        out_pix_V_V_TDATA_blk_n = out_pix_V_V_1_state.read()[1];
    } else {
        out_pix_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void sobel_filter::thread_out_pix_V_V_TVALID() {
    out_pix_V_V_TVALID = out_pix_V_V_1_state.read()[0];
}

void sobel_filter::thread_p_Result_s_fu_251_p5() {
    p_Result_s_fu_251_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(ap_const_lv8_FF, gray_fu_246_p2.read()), gray_fu_246_p2.read()), gray_fu_246_p2.read());
}

void sobel_filter::thread_p_shl3_i_cast_fu_169_p1() {
    p_shl3_i_cast_fu_169_p1 = esl_zext<15,14>(p_shl3_i_fu_161_p3.read());
}

void sobel_filter::thread_p_shl3_i_fu_161_p3() {
    p_shl3_i_fu_161_p3 = esl_concat<8,6>(tmp_2_fu_151_p4.read(), ap_const_lv6_0);
}

void sobel_filter::thread_p_shl4_i_cast_fu_181_p1() {
    p_shl4_i_cast_fu_181_p1 = esl_zext<15,9>(p_shl4_i_fu_173_p3.read());
}

void sobel_filter::thread_p_shl4_i_fu_173_p3() {
    p_shl4_i_fu_173_p3 = esl_concat<8,1>(tmp_2_fu_151_p4.read(), ap_const_lv1_0);
}

void sobel_filter::thread_p_shl_i_cast_fu_197_p1() {
    p_shl_i_cast_fu_197_p1 = esl_zext<16,15>(p_shl_i_fu_189_p3.read());
}

void sobel_filter::thread_p_shl_i_fu_189_p3() {
    p_shl_i_fu_189_p3 = esl_concat<8,7>(new_pix_1_fu_141_p4.read(), ap_const_lv7_0);
}

void sobel_filter::thread_rows_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(out_pix_V_V_1_ack_in.read(), ap_const_logic_1))) {
        rows_0_ack_out = ap_const_logic_1;
    } else {
        rows_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_tmp1_cast_fu_211_p1() {
    tmp1_cast_fu_211_p1 = esl_zext<16,15>(tmp1_fu_205_p2.read());
}

void sobel_filter::thread_tmp1_fu_205_p2() {
    tmp1_fu_205_p2 = (!p_shl3_i_cast_fu_169_p1.read().is_01() || !p_shl4_i_cast_fu_181_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(p_shl3_i_cast_fu_169_p1.read()) + sc_biguint<15>(p_shl4_i_cast_fu_181_p1.read()));
}

void sobel_filter::thread_tmp2_fu_215_p2() {
    tmp2_fu_215_p2 = (!p_shl_i_cast_fu_197_p1.read().is_01() || !tmp_9_i_fu_185_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_shl_i_cast_fu_197_p1.read()) + sc_biguint<16>(tmp_9_i_fu_185_p1.read()));
}

void sobel_filter::thread_tmp_2_fu_151_p4() {
    tmp_2_fu_151_p4 = inter_pix_V_V_0_data_out.read().range(23, 16);
}

void sobel_filter::thread_tmp_3_i_fu_230_p2() {
    tmp_3_i_fu_230_p2 = (!tmp_add0_fu_221_p2.read().is_01() || !tmp_add1_cast_fu_227_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_add0_fu_221_p2.read()) + sc_biguint<16>(tmp_add1_cast_fu_227_p1.read()));
}

void sobel_filter::thread_tmp_9_i_fu_185_p1() {
    tmp_9_i_fu_185_p1 = esl_zext<16,8>(new_pix_1_fu_141_p4.read());
}

void sobel_filter::thread_tmp_add0_fu_221_p2() {
    tmp_add0_fu_221_p2 = (!tmp2_fu_215_p2.read().is_01() || !tmp1_cast_fu_211_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp2_fu_215_p2.read()) + sc_biguint<16>(tmp1_cast_fu_211_p1.read()));
}

void sobel_filter::thread_tmp_add1_cast_fu_227_p1() {
    tmp_add1_cast_fu_227_p1 = esl_zext<16,13>(grp_fu_264_p3.read());
}

void sobel_filter::thread_tmp_fu_126_p2() {
    tmp_fu_126_p2 = (!x_cast_fu_122_p1.read().is_01() || !PIXNUM_reg_283.read().is_01())? sc_lv<1>(): (sc_bigint<32>(x_cast_fu_122_p1.read()) < sc_bigint<32>(PIXNUM_reg_283.read()));
}

void sobel_filter::thread_x_1_fu_131_p2() {
    x_1_fu_131_p2 = (!x_reg_107.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(x_reg_107.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void sobel_filter::thread_x_cast_fu_122_p1() {
    x_cast_fu_122_p1 = esl_zext<32,31>(x_reg_107.read());
}

void sobel_filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 8 : 
            if ((!(esl_seteq<1,1,1>(tmp_fu_126_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(tmp_fu_126_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_pix_V_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void sobel_filter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inter_pix_V_V_TDATA\" :  \"" << inter_pix_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inter_pix_V_V_TVALID\" :  \"" << inter_pix_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inter_pix_V_V_TREADY\" :  \"" << inter_pix_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_pix_V_V_TDATA\" :  \"" << out_pix_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_pix_V_V_TVALID\" :  \"" << out_pix_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_pix_V_V_TREADY\" :  \"" << out_pix_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

